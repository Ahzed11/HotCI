name: Relup CI

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  versions:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if a previous tags exists
      run: |
        LAST_TAG=$(git tag -l --sort=committerdate 'v*.*.*' | tail -n 1)
        echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV

    - uses: erlef/setup-beam@v1
      with:
        otp-version: '26'
        rebar3-version: '3.22.1'

    - name: Get release name
      working-directory: .
      run: |
        RELNAME=$(./scripts/get_release_name ./rebar.config)
        echo "RELNAME=$RELNAME" >> $GITHUB_ENV

    - name: Run validation checks and build releases
      working-directory: .
      if: ${{env.LAST_TAG != ''}}
      run: |
        ./scripts/check_versions ${{env.RELNAME}} $(/usr/bin/git log -1 --format='%H') > vsn.log
        cat vsn.log
        cat vsn.log | awk '/Generated appup/ || /Compiling .*\.appup\.src/ { appup=1 }
                           /relup successfully created!/ { relup=1 }
                           /RESTART version bumped, ignoring relup check./ { restart=1 }
                           END { if (!appup) { print "appup missing"; exit 1}
                                 if (!relup && !restart) { print "relup missing"; exit 1} }'
        OLD=$(cat vsn.log | awk '/OLD:/ {print $2}')
        NEW=$(cat vsn.log | awk '/NEW:/ {print $2}')
        IS_RESTART=$(cat vsn.log | awk '/RESTART version bumped, ignoring relup check./ {found=1; exit} END {if(found) print "true"; else print "false"}')
        echo "OLD_TAR=$OLD" >> $GITHUB_ENV
        echo "NEW_TAR=$NEW" >> $GITHUB_ENV
        echo "IS_RESTART=$IS_RESTART" >> $GITHUB_ENV

      
    - name: Test upgrade and downgrade of the application
      working-directory: .
      if: ${{env.LAST_TAG != '' && env.IS_RESTART == 'false'}}
      run: |
        mkdir relupci
        mkdir relupci/releases/
        cp "${{ env.OLD_TAR }}" relupci/releases/
        cp "${{ env.NEW_TAR }}" relupci/releases/

        OLD_TAG=$(echo "${{ env.OLD_TAR }}"  | sed -nr 's/^.*([0-9]+\.[0-9]+\.[0-9]+)\.tar\.gz$/\1/p')
        NEW_TAG=$(echo "${{ env.NEW_TAR }}"  | sed -nr 's/^.*([0-9]+\.[0-9]+\.[0-9]+)\.tar\.gz$/\1/p')

        RELEASE_DIR=$(readlink -f relupci/releases/)
        echo -e "{old_version, \"$OLD_TAG\"}.\n{new_version, \"$NEW_TAG\"}.\n{release_name, \"${{env.RELNAME}}\"}.\n{release_dir, \"$RELEASE_DIR\"}." >> ./test/config.config

        mkdir results
        rebar3 ct --dir ./test --verbose true --config ./test/config.config --logdir ./results --label relup-ci
    
    - name: Remove releases to save space
      working-directory: .
      if: ${{ always() && env.LAST_TAG != '' && env.IS_RESTART == 'false'}}
      run: rm -rf ./results/**/*.tar.gz

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: ${{ always() && env.LAST_TAG != '' && env.IS_RESTART == 'false'}}
      with:
        name: relup-ci-results
        path: ./results
        compression-level: 9 
        retention-days: 30

    - name: Relup CI results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: ${{ always() && env.LAST_TAG != '' && env.IS_RESTART == 'false'}}
      with:
        check_name: Relup CI results
        files: |
          ./results/**/*.xml
